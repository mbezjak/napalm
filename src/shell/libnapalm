# type:/bin/bash
#
# Copyright (c) 2010 Miro Bezjak <bezjak.miro@gmail.com>
#
# Licensed under the MIT License (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.opensource.org/licenses/mit-license.php
#

# Yeah, I know it's inefficient.
# A millisecond here, a millisecond there...
# It's too little for me to care.
# :)

# Note: NAPALM_USER_HOME and NAPALM_PROGRAMS_DIR could point to a non existent
# directory!
configure_environment() {
  [[ -z "$NAPALM_USER_HOME" ]]    && NAPALM_USER_HOME=$HOME/.napalm
  [[ -z "$NAPALM_PROGRAMS_DIR" ]] && NAPALM_PROGRAMS_DIR=$NAPALM_USER_HOME/programs
}

# args:
# $1 - path from which to resolve version
resolve_version_from_path() {
  local basepath=$(basename $1)
  # everything after first dash (-) is a version
  echo ${basepath#*-}
}

# args:
# $1 - path from which to resolve program name
resolve_program_name_from_path() {
  local basepath=$(basename $1)
  # everything before first dash (-) is a program name
  echo ${basepath%%-*}
}

list_plugins() {
  local count=0
  local plugins=''

  local iterator=$NAPALM_HOME/plugins/*
  if [[ -d $NAPALM_USER_HOME/plugins ]]; then
    iterator="$iterator $(echo $NAPALM_USER_HOME/plugins/*)"
  fi

  for f in $iterator
  do
    let count="$count + 1"
    plugins="${plugins} $(basename $f)"
  done

  echo "Plugins [$count]:$plugins"
}

# args:
# $1 (optional) - program name
# $2 (optional) - program version
show_program() {
  if [[ -n "$1" && -n "$2" ]]; then
    show_program_with_name_and_version "$1" "$2"
  elif [[ -n "$1" ]]; then
    show_program_with_name "$1"
  else
    show_program_all
  fi
}

# args:
# $1 - program name
# $2 - program version
# example:
# show_program_with_name_and_version foo 1.3
show_program_with_name_and_version() {
  local link="$NAPALM_PROGRAMS_DIR/$1"
  local prog="$link-$2"
  local flag=' '

  [[ ! -d $prog ]] && {
    echo "Not installed: $1 $2"
    return 1
  }

  # does link exists and points towards foo-1.3?
  [[ -L $link && $(readlink -f $link) == $prog ]] && flag='*'

  echo " $flag $prog"
  return 0
}

# args:
# $1 - program name
# example:
# show_program_with_name foo
show_program_with_name() {
  local name="$1"
  local iterator=$(find $NAPALM_PROGRAMS_DIR -mindepth 1 -maxdepth 1 -type d -name "$name-*" -printf "%f\n" 2> /dev/null)

  [[ -z $iterator ]] && {
    echo "Not installed: $1"
    return 1
  }

  for p in $iterator
  do
    local version=$(resolve_version_from_path $p)
    show_program_with_name_and_version $name $version
  done

  return 0
}

# accepts no arguments and prints every installed program
show_program_all() {
  local iterator=$(find $NAPALM_PROGRAMS_DIR -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2> /dev/null)

  [[ -z $iterator ]] && {
    echo "Nothing installed"
    return 1
  }

  for p in $iterator
  do
    local name=$(resolve_program_name_from_path $p)
    local version=$(resolve_version_from_path $p)
    show_program_with_name_and_version $name $version
  done

  return 0
}
