# type:/bin/bash
#
# Copyright (c) 2010 Miro Bezjak <bezjak.miro@gmail.com>
#
# Licensed under the MIT License (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.opensource.org/licenses/mit-license.php
#

# Yeah, I know it's inefficient.
# A millisecond here, a millisecond there...
# It's too little for me to care.
# :)

configure_environment() {
  [[ -z "$NAPALM_USER_HOME" ]] && NAPALM_USER_HOME=$HOME/.napalm

  PROGRAMS_DIR=${NAPALM_USER_HOME}/programs
}

list_plugins() {
  local count=0
  local plugins=''

  for f in ${NAPALM_HOME}/plugins/* ${NAPALM_USER_HOME}/plugins/*
  do
    let count="$count + 1"
    plugins="${plugins} $(basename $f)"
  done

  echo "Plugins[$count]:$plugins"
}

# args:
# $1 - program name
# $2 - program version
show_program() {
  # flag='*' means that is an active version

  # e.g. napalm show foo 1.3
  if [[ -n "$1" && -n "$2" ]]; then
    local link=${PROGRAMS_DIR}/$1
    local prog=${link}-$2
    local flag=' '

    [[ ! -d $prog ]] && {
      echo "Not installed: $1 $2"
      return 1
    }

    # link exists and points towards foo-1.3
    [[ -L $link && $(readlink -f $link) == $prog ]] && flag='*'

    echo " $flag $prog"
    return 0

  # e.g. napalm show foo
  elif [[ -n "$1" ]]; then
    local link=${PROGRAMS_DIR}/$1
    local flag=' '
    local iterator=$(find $PROGRAMS_DIR -mindepth 1 -maxdepth 1 -type d -printf "%f\n")

    [[ -z $iterator ]] && {
      echo "Not installed: $1"
      return 1
    }

    for p in $iterator
    do
      local prog=${tmp}/${p}

      # link exists and points towards $prog
      [[ -L $link && $(readlink -f $link) == $prog ]] && flag='*'

      echo " $flag $prog"
    done
    return 0

  # e.g. napalm show
  else
    local flag=' '
    local iterator=$(find $PROGRAMS_DIR -mindepth 1 -maxdepth 1 -type d -printf "%f\n")

    [[ -z $iterator ]] && {
      echo "Nothing installed"
      return 1
    }

    for p in $iterator
    do
      local prog=${tmp}/${p}
      flag=' '

      # if anyone points to $prog set $flag
      for l in $(find $PROGRAMS_DIR -mindepth 1 -maxdepth 1 -type l -printf "%f\n")
      do
        local link=${tmp}/$l
        [[ -L $link && $(readlink -f $link) == $prog ]] && flag='*'
      done

      echo " $flag $prog"
    done
  fi

}
