# type:/bin/bash
#
# Copyright (c) 2010-2012 Miro Bezjak <bezjak.miro@gmail.com>
#
# Licensed under the MIT License (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.opensource.org/licenses/mit-license.php
#

# Yeah, I know it's inefficient.
# A millisecond here, a millisecond there...
# It's too little for me to care.
# :)

# Note: NAPALM_USER_HOME and NAPALM_PROGRAMS_DIR could point to a non existent
# directory!
configure_environment() {
  [[ -z "$NAPALM_USER_HOME" ]]    && NAPALM_USER_HOME=$HOME/.napalm
  [[ -z "$NAPALM_PROGRAMS_DIR" ]] && NAPALM_PROGRAMS_DIR=$NAPALM_USER_HOME/programs
  return 0
}

# args:
# $1 - path from which to resolve version
resolve_version_from_path() {
  local basepath=$(basename $1)
  # everything after first dash (-) is a version
  echo ${basepath#*-}

  return 0
}

# args:
# $1 - path from which to resolve program name
resolve_program_name_from_path() {
  local basepath=$(basename $1)
  # everything before first dash (-) is a program name
  echo ${basepath%%-*}

  return 0
}

# args:
# $1 - program name
# $2 - program version (optional)
construct_path() {
  local path="$NAPALM_PROGRAMS_DIR/$1"
  [[ -n "$2" ]] && path="$path-$2"

  echo $path
  return 0
}

# args:
# $1 - program name
# $2 - program version (optional)
handle_not_installed() {
  local msg="Not installed: $1"
  [[ -n "$2" ]] && msg="$msg $2"

  echo $msg 1>&2
  return 0
}

list_plugins() {
  local count=0
  local plugins=''

  local iterator=$(ls -1 $NAPALM_HOME/plugins)
  if [[ -d $NAPALM_USER_HOME/plugins ]]; then
    iterator="$iterator $(ls -1 $NAPALM_USER_HOME/plugins)"
  fi

  for f in $iterator
  do
    let count="$count + 1"
    plugins="${plugins} $(basename $f)"
  done

  echo "Plugins [$count]:$plugins"
  return 0
}

# args:
# $1 (optional) - program name
# $2 (optional) - program version
show_program() {
  if [[ -n "$1" && -n "$2" ]]; then
    show_program_with_name_and_version "$1" "$2"
  elif [[ -n "$1" ]]; then
    show_program_with_name "$1"
  else
    show_program_all
  fi

  return
}

# args:
# $1 - program name
# $2 - program version
# example:
# show_program_with_name_and_version foo 1.3
show_program_with_name_and_version() {
  local link=$(construct_path "$1")
  local prog=$(construct_path "$1" "$2")
  local flag=' '

  [[ ! -d $prog ]] && {
    handle_not_installed "$1" "$2"
    return 1
  }

  # does link exists and points towards foo-1.3?
  [[ -L $link && $(readlink -f $link) == $prog ]] && flag='*'

  echo " $flag $prog"
  return 0
}

# args:
# $1 - program name
# example:
# show_program_with_name foo
show_program_with_name() {
  local name="$1"
  local iterator=$(find $NAPALM_PROGRAMS_DIR -mindepth 1 -maxdepth 1 -type d -name "$name-*" -printf "%f\n" 2> /dev/null | sort)

  [[ -z $iterator ]] && {
    handle_not_installed $name
    return 1
  }

  for p in $iterator
  do
    local version=$(resolve_version_from_path $p)
    show_program_with_name_and_version $name $version
  done

  return 0
}

# accepts no arguments and prints every installed program
show_program_all() {
  local iterator=$(find $NAPALM_PROGRAMS_DIR -mindepth 1 -maxdepth 1 -type d -printf "%f\n" 2> /dev/null | sort)

  [[ -z $iterator ]] && {
    echo "Nothing installed" 1>&2
    return 1
  }

  for p in $iterator
  do
    local name=$(resolve_program_name_from_path $p)
    local version=$(resolve_version_from_path $p)
    show_program_with_name_and_version $name $version
  done

  return 0
}

# args:
# $1 - program name
# $2 - program version
# example:
# use_program foo 1.3
use_program() {
  [[ -z "$1" ]] && return 2
  [[ -z "$2" ]] && return 3

  local link=$(construct_path $1)
  local prog=$(construct_path $1 $2)

  [[ ! -d $prog ]] && {
    handle_not_installed "$1" "$2"
    return 1
  }

  rm -f $link
  ln -s $prog $link
  show_program_with_name "$1"

  return 0
}

# args:
# $1 - plugin name
load_plugin() {
  local plugin="$NAPALM_HOME/plugins/$1"
  if [[ -f $plugin ]]; then
    . $plugin
  else
    plugin="$NAPALM_USER_HOME/plugins/$1"
    [[ -f $plugin ]] && . $plugin || return 1
  fi

  return 0
}

create_and_change_to_temp_directory() {
  cd $(mktemp -d /tmp/napalm.XXXXXXXXX)
}

# args:
# $1 - url locations as a space separated string
download_program() {
  local wget_status
  for url in $(echo "$1")
  do
    set +o errexit
    wget $url
    wget_status=$?
    set -o errexit

    [[ $wget_status -eq 0 ]] && return 0
  done

  return 1
}

# args:
# $1 - archive name
# $2 - directory to extract to
extract_program() {
  local archive="$1"
  local into_dir="$2"
  mkdir $into_dir

  case $archive in
  *.tar.gz)
    tar --gzip --directory $into_dir -xf $archive
    ;;
  *.tgz)
    tar --gzip --directory $into_dir -xf $archive
    ;;
  *.tar.bz2)
    tar --bzip2 --directory $into_dir -xf $archive
    ;;
  *.zip)
    unzip -q $archive -d $into_dir
    ;;
  *.jar)
    mkdir "$into_dir/$archive"
    cp $archive "$into_dir/$archive"
    ;;
  *)
    return 1
  esac

  return
}

# args:
# $1 - program name
# $2 - program version
# example:
# install_program foo 1.3
install_program() {
  [[ -z "$1" ]] && return 5
  [[ -z "$2" ]] && return 6

  VERSION="$2"
  load_plugin "$1" || {
    echo "No plugin: $1" 1>&2
    return 1
  }

  # note: no tests for code below
  create_and_change_to_temp_directory
  download_program "$URL" || {
    echo "Couldn't download $1-$2 in any of $URL" 1>&2
    return 2
  }

  local archive=$(ls -1)
  local extracted_dir='extracted'
  extract_program $archive $extracted_dir || {
    echo "Couldn't extract archive $PWD/$archive" 1>&2
    return 3
  }

  mkdir -p "$NAPALM_PROGRAMS_DIR"
  program=$(ls $extracted_dir)
  rm -rf "$NAPALM_PROGRAMS_DIR/$1" "$NAPALM_PROGRAMS_DIR/$1-$VERSION"

  mv "extracted/$program" "$NAPALM_PROGRAMS_DIR/$1-$VERSION"
  ln -s "$NAPALM_PROGRAMS_DIR/$1-$VERSION" "$NAPALM_PROGRAMS_DIR/$1"

  if hash build 2> /dev/null; then
    cd "$NAPALM_PROGRAMS_DIR/$1-$VERSION"
    build || {
      echo "Failed to build $1-$VERSION" 1>&2
      return 4
    }
  fi

  local program_rc="$NAPALM_USER_HOME/${1}.sh"
  if [[ ! -f "$program_rc" && -n "$PROGRAM_ENV" ]]; then
    SHOULD_RESTART_TERMINAL=true
    touch "$program_rc"
    chmod u+x "$program_rc"

    echo "# autogenerated by $0 on `date`" >> "$program_rc"
    echo "export $PROGRAM_ENV=\"$NAPALM_PROGRAMS_DIR/$1\"" >> "$program_rc"
    echo "Created $program_rc"
    if [[ "$PROGRAM_PATH" == true && -d $NAPALM_PROGRAMS_DIR/$1/bin ]]; then
      echo "export PATH=\"\$PATH:\$${PROGRAM_ENV}/bin\"" >> "$program_rc"

      echo
      echo "$program_rc adds $NAPALM_PROGRAMS_DIR/$1/bin to \$PATH. That includes:"
      echo "----------------------------------------"
      ls "$NAPALM_PROGRAMS_DIR/$1/bin"
      echo "----------------------------------------"
      echo
    fi
  fi

  if [[ $SHOULD_RESTART_TERMINAL == true ]]; then
    echo "To complete installation of $1 $VERSION restart terminal"
  else
    echo "Installed $1 $VERSION"
  fi
  return 0
}

# args:
# $1 - program name
# example:
# uninstall_program foo
uninstall_program() {
  [[ -z "$1" ]] && return 1

  local name="$1"
  rm -f "$NAPALM_USER_HOME/${name}.sh"
  rm -f "$NAPALM_PROGRAMS_DIR/$name"
  rm -rf "$NAPALM_PROGRAMS_DIR/$name"-*

  return 0
}


#############################
# Functions used by plugins #

# args:
# $1 - url1
# $2 - url2
# ...
# example:
# url "http://acme.com/${VERSION}" "http://example.org/?version=${VERSION}"
url() {
  URL="$1"
  shift

  while [[ -n "$1" ]]
  do
    URL="$URL $1"
    shift
  done

  return 0
}

# args:
# $1 - environment name
# example:
# set_env 'FOO_HOME'
set_env() {
  PROGRAM_ENV="$1"
  return 0
}

# args:
# $1 - true|false
# example:
# set_path true
set_path() {
  PROGRAM_PATH="$1"
  return 0
}
